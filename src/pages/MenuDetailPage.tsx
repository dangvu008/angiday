import React, { useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { 
  Clock, Users, Star, ChefHat, Heart, Share2, Download, 
  Play, ArrowLeft, Plus, Check, ShoppingCart, Calendar 
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

const MenuDetailPage = () => {
  const { id } = useParams();
  const [isFavorited, setIsFavorited] = useState(false);
  const [activeRecipe, setActiveRecipe] = useState(0);

  // Mock data - trong th·ª±c t·∫ø s·∫Ω fetch t·ª´ API d·ª±a tr√™n id
  const menu = {
    id: 1,
    title: 'Th·ª±c ƒë∆°n ƒÉn chay thanh ƒë·∫°m',
    description: 'B·ªô s∆∞u t·∫≠p c√°c m√≥n ƒÉn chay b·ªï d∆∞·ª°ng, thanh ƒë·∫°m cho s·ª©c kh·ªèe. Th·ª±c ƒë∆°n n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho nh·ªØng ai mu·ªën c√≥ m·ªôt ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh, gi√†u ch·∫•t x∆° v√† vitamin.',
    image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=800&h=600&fit=crop',
    category: 'an-chay',
    difficulty: 'D·ªÖ',
    cookingTime: 45,
    servings: 4,
    calories: 1200,
    cost: 150000,
    rating: 4.8,
    reviews: 124,
    views: 2340,
    author: {
      name: 'Chef Minh',
      avatar: 'https://ui-avatars.com/api/?name=Chef+Minh&background=f97316&color=fff',
      bio: 'Chuy√™n gia ·∫©m th·ª±c chay v·ªõi 10 nƒÉm kinh nghi·ªám'
    },
    tags: ['chay', 'healthy', 'thanh ƒë·∫°m', 'gia ƒë√¨nh'],
    nutrition: {
      protein: 45,
      carbs: 180,
      fat: 25,
      fiber: 35,
      sugar: 20,
      sodium: 800
    },
    recipes: [
      {
        id: '1',
        title: 'Canh chua chay',
        description: 'Canh chua thanh m√°t v·ªõi rau c·ªß t∆∞∆°i ngon',
        category: 'Canh',
        difficulty: 'D·ªÖ',
        cookingTime: '15 ph√∫t',
        servings: 4,
        author: 'Chef Minh',
        status: 'published',
        createdDate: '2024-01-15',
        views: 1200,
        image: 'https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=300&h=200&fit=crop',
        ingredients: ['C√† chua', 'D·ª©a', 'ƒê·∫≠u b·∫Øp', 'Gi√° ƒë·ªó', 'Me'],
        instructions: ['N·∫•u n∆∞·ªõc d√πng chua', 'Cho rau c·ªß v√†o n·∫•u', 'N√™m n·∫øm v·ª´a ƒÉn'],
        nutrition: { calories: 120, protein: 3, carbs: 25, fat: 1, fiber: 4 },
        tags: ['chay', 'canh', 'healthy'],
        cuisine: 'Vi·ªát Nam',
        rating: 4.3,
        reviews: 45
      },
      {
        id: '2',
        title: 'ƒê·∫≠u h≈© s·ªët c√† chua',
        description: 'ƒê·∫≠u h≈© m·ªÅm m·ªãn v·ªõi s·ªët c√† chua ƒë·∫≠m ƒë√†',
        category: 'M√≥n ch√≠nh',
        difficulty: 'D·ªÖ',
        cookingTime: '20 ph√∫t',
        servings: 4,
        author: 'Chef Minh',
        status: 'published',
        createdDate: '2024-01-15',
        views: 980,
        image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?w=300&h=200&fit=crop',
        ingredients: ['ƒê·∫≠u h≈©', 'C√† chua', 'H√†nh t√¢y', 'T·ªèi'],
        instructions: ['Chi√™n ƒë·∫≠u h≈©', 'L√†m s·ªët c√† chua', 'Tr·ªôn ƒë·ªÅu v√† th∆∞·ªüng th·ª©c'],
        nutrition: { calories: 180, protein: 12, carbs: 15, fat: 8, fiber: 3 },
        tags: ['chay', 'ƒë·∫≠u h≈©', 'protein'],
        cuisine: 'Vi·ªát Nam',
        rating: 4.5,
        reviews: 67
      },
      {
        id: '3',
        title: 'Rau mu·ªëng x√†o t·ªèi',
        description: 'Rau mu·ªëng t∆∞∆°i xanh x√†o v·ªõi t·ªèi th∆°m',
        category: 'Rau xanh',
        difficulty: 'D·ªÖ',
        cookingTime: '10 ph√∫t',
        servings: 4,
        author: 'Chef Minh',
        status: 'published',
        createdDate: '2024-01-15',
        views: 750,
        image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=300&h=200&fit=crop',
        ingredients: ['Rau mu·ªëng', 'T·ªèi', 'D·∫ßu ƒÉn', 'N∆∞·ªõc m·∫Øm'],
        instructions: ['Nh·∫∑t rau mu·ªëng', 'X√†o t·ªèi th∆°m', 'Cho rau v√†o x√†o nhanh'],
        nutrition: { calories: 80, protein: 4, carbs: 12, fat: 2, fiber: 6 },
        tags: ['chay', 'rau xanh', 'vitamin'],
        cuisine: 'Vi·ªát Nam',
        rating: 4.1,
        reviews: 32
      },
      {
        id: '4',
        title: 'C∆°m g·∫°o l·ª©t',
        description: 'C∆°m g·∫°o l·ª©t b·ªï d∆∞·ª°ng, gi√†u ch·∫•t x∆°',
        category: 'Tinh b·ªôt',
        difficulty: 'D·ªÖ',
        cookingTime: '30 ph√∫t',
        servings: 4,
        author: 'Chef Minh',
        status: 'published',
        createdDate: '2024-01-15',
        views: 650,
        image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=200&fit=crop',
        ingredients: ['G·∫°o l·ª©t', 'N∆∞·ªõc'],
        instructions: ['Vo g·∫°o s·∫°ch', 'Ng√¢m 2 ti·∫øng', 'N·∫•u c∆°m b√¨nh th∆∞·ªùng'],
        nutrition: { calories: 200, protein: 5, carbs: 40, fat: 2, fiber: 4 },
        tags: ['chay', 'healthy', 'ch·∫•t x∆°'],
        cuisine: 'Vi·ªát Nam',
        rating: 4.0,
        reviews: 28
      }
    ],
    ingredients: [
      { name: 'ƒê·∫≠u h≈©', quantity: '2 mi·∫øng', category: 'Protein' },
      { name: 'Rau mu·ªëng', quantity: '300g', category: 'Rau xanh' },
      { name: 'C√† chua', quantity: '3 qu·∫£', category: 'Rau c·ªß' },
      { name: 'G·∫°o l·ª©t', quantity: '2 ch√©n', category: 'Tinh b·ªôt' },
      { name: 'T·ªèi', quantity: '3 t√©p', category: 'Gia v·ªã' },
      { name: 'H√†nh l√°', quantity: '2 c√¢y', category: 'Rau th∆°m' }
    ],
    instructions: [
      'Chu·∫©n b·ªã t·∫•t c·∫£ nguy√™n li·ªáu, r·ª≠a s·∫°ch rau c·ªß',
      'N·∫•u c∆°m g·∫°o l·ª©t tr∆∞·ªõc kho·∫£ng 30 ph√∫t',
      'L√†m canh chua chay v·ªõi rau c·ªß t∆∞∆°i',
      'X√†o ƒë·∫≠u h≈© v·ªõi s·ªët c√† chua',
      'X√†o rau mu·ªëng v·ªõi t·ªèi',
      'B√†y bi·ªán v√† th∆∞·ªüng th·ª©c'
    ],
    tips: [
      'Ch·ªçn ƒë·∫≠u h≈© t∆∞∆°i, kh√¥ng b·ªã v·ª°',
      'Rau mu·ªëng n√™n ch·ªçn lo·∫°i non, l√° xanh',
      'C√† chua ch√≠n ƒë·ªè s·∫Ω cho v·ªã ng·ªçt t·ª± nhi√™n',
      'G·∫°o l·ª©t n√™n ng√¢m tr∆∞·ªõc 2-3 ti·∫øng'
    ]
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'D·ªÖ': return 'bg-green-100 text-green-800';
      case 'Trung b√¨nh': return 'bg-yellow-100 text-yellow-800';
      case 'Kh√≥': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Breadcrumb */}
        <nav className="flex items-center space-x-2 text-sm text-gray-600 mb-6">
          <Link to="/" className="hover:text-orange-600">Trang ch·ªß</Link>
          <span>/</span>
          <Link to="/thuc-don" className="hover:text-orange-600">Th·ª±c ƒë∆°n</Link>
          <span>/</span>
          <span className="text-gray-900">{menu.title}</span>
        </nav>

        {/* Back Button */}
        <Button variant="ghost" className="mb-6" asChild>
          <Link to="/thuc-don">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Quay l·∫°i danh s√°ch
          </Link>
        </Button>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Hero Section */}
            <Card className="overflow-hidden">
              <div className="relative">
                <img
                  src={menu.image}
                  alt={menu.title}
                  className="w-full h-64 md:h-80 object-cover"
                />
                <div className="absolute inset-0 bg-black bg-opacity-40 flex items-end">
                  <div className="p-6 text-white">
                    <div className="flex items-center gap-2 mb-2">
                      <Badge className="bg-white text-gray-900">
                        {menu.recipes.length} m√≥n ƒÉn
                      </Badge>
                      <Badge className={getDifficultyColor(menu.difficulty)}>
                        {menu.difficulty}
                      </Badge>
                    </div>
                    <h1 className="text-3xl font-bold mb-2">{menu.title}</h1>
                    <p className="text-lg opacity-90">{menu.description}</p>
                  </div>
                </div>
              </div>
            </Card>

            {/* Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Card className="text-center p-4">
                <Clock className="h-6 w-6 mx-auto mb-2 text-orange-600" />
                <p className="text-sm text-gray-600">Th·ªùi gian</p>
                <p className="font-semibold">{menu.cookingTime} ph√∫t</p>
              </Card>
              <Card className="text-center p-4">
                <Users className="h-6 w-6 mx-auto mb-2 text-blue-600" />
                <p className="text-sm text-gray-600">Kh·∫©u ph·∫ßn</p>
                <p className="font-semibold">{menu.servings} ng∆∞·ªùi</p>
              </Card>
              <Card className="text-center p-4">
                <span className="text-2xl mx-auto mb-2 block">üî•</span>
                <p className="text-sm text-gray-600">Calories</p>
                <p className="font-semibold">{menu.calories} cal</p>
              </Card>
              <Card className="text-center p-4">
                <span className="text-2xl mx-auto mb-2 block">üí∞</span>
                <p className="text-sm text-gray-600">Chi ph√≠</p>
                <p className="font-semibold">{formatCurrency(menu.cost)}</p>
              </Card>
            </div>

            {/* Tabs Content */}
            <Tabs defaultValue="recipes" className="space-y-6">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="recipes">C√¥ng th·ª©c</TabsTrigger>
                <TabsTrigger value="ingredients">Nguy√™n li·ªáu</TabsTrigger>
                <TabsTrigger value="instructions">C√°ch l√†m</TabsTrigger>
                <TabsTrigger value="nutrition">Dinh d∆∞·ª°ng</TabsTrigger>
              </TabsList>

              <TabsContent value="recipes">
                <Card>
                  <CardHeader>
                    <CardTitle>C√°c m√≥n trong th·ª±c ƒë∆°n ({menu.recipes.length} m√≥n)</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {menu.recipes.map((recipe, index) => (
                        <Card
                          key={recipe.id}
                          className={`cursor-pointer transition-all hover:shadow-md ${
                            activeRecipe === index ? 'ring-2 ring-orange-500' : ''
                          }`}
                          onClick={() => setActiveRecipe(index)}
                        >
                          <div className="flex">
                            {recipe.image && (
                              <img
                                src={recipe.image}
                                alt={recipe.title}
                                className="w-24 h-24 object-cover rounded-l-lg"
                              />
                            )}
                            <div className="p-4 flex-1">
                              <h4 className="font-medium mb-1">{recipe.title}</h4>
                              <p className="text-sm text-gray-600 mb-2 line-clamp-2">{recipe.description}</p>
                              <div className="flex items-center gap-3 text-xs text-gray-500 mb-2">
                                <span className="flex items-center gap-1">
                                  <Clock className="h-3 w-3" />
                                  {recipe.cookingTime}
                                </span>
                                <span className="flex items-center gap-1">
                                  <Users className="h-3 w-3" />
                                  {recipe.servings}
                                </span>
                                <span>{recipe.nutrition.calories} cal</span>
                              </div>
                              <div className="flex items-center gap-2">
                                <Badge className={getDifficultyColor(recipe.difficulty)} size="sm">
                                  {recipe.difficulty}
                                </Badge>
                                <Badge variant="outline" size="sm">
                                  {recipe.category}
                                </Badge>
                                <div className="flex items-center gap-1 text-xs">
                                  <Star className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                                  <span>{recipe.rating}</span>
                                </div>
                              </div>
                            </div>
                          </div>
                        </Card>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="ingredients">
                <Card>
                  <CardHeader>
                    <CardTitle>Danh s√°ch nguy√™n li·ªáu</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {Object.entries(
                        menu.ingredients.reduce((acc, ingredient) => {
                          if (!acc[ingredient.category]) {
                            acc[ingredient.category] = [];
                          }
                          acc[ingredient.category].push(ingredient);
                          return acc;
                        }, {} as Record<string, typeof menu.ingredients>)
                      ).map(([category, ingredients]) => (
                        <div key={category}>
                          <h4 className="font-medium text-gray-900 mb-2">{category}</h4>
                          <div className="space-y-2">
                            {ingredients.map((ingredient, index) => (
                              <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                                <span>{ingredient.name}</span>
                                <span className="font-medium">{ingredient.quantity}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="instructions">
                <Card>
                  <CardHeader>
                    <CardTitle>H∆∞·ªõng d·∫´n th·ª±c hi·ªán</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {menu.instructions.map((step, index) => (
                        <div key={index} className="flex gap-4">
                          <div className="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center font-medium">
                            {index + 1}
                          </div>
                          <p className="text-gray-700 pt-1">{step}</p>
                        </div>
                      ))}
                    </div>
                    
                    {menu.tips.length > 0 && (
                      <div className="mt-8 p-4 bg-yellow-50 rounded-lg">
                        <h4 className="font-medium text-yellow-800 mb-2">üí° M·∫πo hay</h4>
                        <ul className="space-y-1 text-sm text-yellow-700">
                          {menu.tips.map((tip, index) => (
                            <li key={index}>‚Ä¢ {tip}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="nutrition">
                <Card>
                  <CardHeader>
                    <CardTitle>Th√¥ng tin dinh d∆∞·ª°ng</CardTitle>
                    <p className="text-sm text-gray-600">Cho {menu.servings} kh·∫©u ph·∫ßn</p>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                      <div className="text-center p-4 bg-blue-50 rounded-lg">
                        <p className="text-2xl font-bold text-blue-600">{menu.nutrition.protein}g</p>
                        <p className="text-sm text-gray-600">Protein</p>
                      </div>
                      <div className="text-center p-4 bg-green-50 rounded-lg">
                        <p className="text-2xl font-bold text-green-600">{menu.nutrition.carbs}g</p>
                        <p className="text-sm text-gray-600">Carbs</p>
                      </div>
                      <div className="text-center p-4 bg-yellow-50 rounded-lg">
                        <p className="text-2xl font-bold text-yellow-600">{menu.nutrition.fat}g</p>
                        <p className="text-sm text-gray-600">Fat</p>
                      </div>
                      <div className="text-center p-4 bg-purple-50 rounded-lg">
                        <p className="text-2xl font-bold text-purple-600">{menu.nutrition.fiber}g</p>
                        <p className="text-sm text-gray-600">Ch·∫•t x∆°</p>
                      </div>
                      <div className="text-center p-4 bg-red-50 rounded-lg">
                        <p className="text-2xl font-bold text-red-600">{menu.nutrition.sugar}g</p>
                        <p className="text-sm text-gray-600">ƒê∆∞·ªùng</p>
                      </div>
                      <div className="text-center p-4 bg-gray-50 rounded-lg">
                        <p className="text-2xl font-bold text-gray-600">{menu.nutrition.sodium}mg</p>
                        <p className="text-sm text-gray-600">Natri</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Author Info */}
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center gap-4 mb-4">
                  <img
                    src={menu.author.avatar}
                    alt={menu.author.name}
                    className="w-12 h-12 rounded-full"
                  />
                  <div>
                    <h3 className="font-medium">{menu.author.name}</h3>
                    <p className="text-sm text-gray-600">{menu.author.bio}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2 mb-4">
                  <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                  <span className="font-medium">{menu.rating}</span>
                  <span className="text-sm text-gray-600">({menu.reviews} ƒë√°nh gi√°)</span>
                </div>
                <div className="text-sm text-gray-600">
                  {menu.views.toLocaleString()} l∆∞·ª£t xem
                </div>
              </CardContent>
            </Card>

            {/* Actions */}
            <Card>
              <CardContent className="p-6 space-y-3">
                <Button 
                  className="w-full"
                  onClick={() => setIsFavorited(!isFavorited)}
                  variant={isFavorited ? "default" : "outline"}
                >
                  <Heart className={`h-4 w-4 mr-2 ${isFavorited ? 'fill-current' : ''}`} />
                  {isFavorited ? 'ƒê√£ y√™u th√≠ch' : 'Y√™u th√≠ch'}
                </Button>
                
                <Button variant="outline" className="w-full">
                  <Calendar className="h-4 w-4 mr-2" />
                  Th√™m v√†o k·∫ø ho·∫°ch
                </Button>
                
                <Button variant="outline" className="w-full">
                  <ShoppingCart className="h-4 w-4 mr-2" />
                  T·∫°o danh s√°ch mua s·∫Øm
                </Button>
                
                <div className="flex gap-2">
                  <Button variant="outline" className="flex-1">
                    <Share2 className="h-4 w-4 mr-2" />
                    Chia s·∫ª
                  </Button>
                  <Button variant="outline" className="flex-1">
                    <Download className="h-4 w-4 mr-2" />
                    T·∫£i v·ªÅ
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Tags */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Tags</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {menu.tags.map((tag, index) => (
                    <Badge key={index} variant="secondary">
                      {tag}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
};

export default MenuDetailPage;
