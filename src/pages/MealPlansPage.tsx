
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Calendar, Users, DollarSign, Heart, Clock } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useState } from 'react';

const MealPlansPage = () => {
  const navigate = useNavigate();
  const [selectedCategory, setSelectedCategory] = useState('all');

  const mealPlans = [
    // Th·ª±c ƒë∆°n l·∫ª (t·ª´ng b·ªØa)
    {
      id: 1,
      title: "B·ªØa s√°ng dinh d∆∞·ª°ng v·ªõi tr·ª©ng",
      image: "https://images.unsplash.com/photo-1506084868230-bb9d95c24759?w=400&h=300&fit=crop",
      duration: "30 ph√∫t",
      servings: "1 b·ªØa ƒÉn",
      budget: "50K",
      difficulty: "D·ªÖ",
      type: "single",
      category: "Th·ª±c ƒë∆°n l·∫ª",
      tags: ["B·ªØa s√°ng", "Protein", "Nhanh"],
      description: "B·ªØa s√°ng ƒë·∫ßy ƒë·ªß protein v√† vitamin ƒë·ªÉ b·∫Øt ƒë·∫ßu ng√†y m·ªõi",
      meals: 1,
      rating: 4.5
    },
    {
      id: 2,
      title: "B·ªØa tr∆∞a vƒÉn ph√≤ng ti·ªán l·ª£i",
      image: "https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=400&h=300&fit=crop",
      duration: "45 ph√∫t",
      servings: "1 b·ªØa ƒÉn",
      budget: "80K",
      difficulty: "D·ªÖ",
      type: "single",
      category: "Th·ª±c ƒë∆°n l·∫ª",
      tags: ["B·ªØa tr∆∞a", "VƒÉn ph√≤ng", "Ti·ªán l·ª£i"],
      description: "B·ªØa tr∆∞a nhanh g·ªçn ph√π h·ª£p cho d√¢n vƒÉn ph√≤ng b·∫≠n r·ªôn",
      meals: 1,
      rating: 4.3
    },
    {
      id: 3,
      title: "B·ªØa t·ªëi l√£ng m·∫°n cho 2 ng∆∞·ªùi",
      image: "https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=400&h=300&fit=crop",
      duration: "1.5 gi·ªù",
      servings: "1 b·ªØa ƒÉn",
      budget: "300K",
      difficulty: "Trung b√¨nh",
      type: "single",
      category: "Th·ª±c ƒë∆°n l·∫ª",
      tags: ["B·ªØa t·ªëi", "L√£ng m·∫°n", "Cao c·∫•p"],
      description: "B·ªØa t·ªëi ƒë·∫∑c bi·ªát cho nh·ªØng d·ªãp k·ª∑ ni·ªám quan tr·ªçng",
      meals: 1,
      rating: 4.8
    },
    // Th·ª±c ƒë∆°n ng√†y
    {
      id: 4,
      title: "Th·ª±c ƒë∆°n 1 ng√†y gia ƒë√¨nh h·∫°nh ph√∫c",
      image: "https://images.unsplash.com/photo-1490645935967-10de6ba17061?w=400&h=300&fit=crop",
      duration: "1 ng√†y",
      servings: "4 ng∆∞·ªùi",
      budget: "200K/ng√†y",
      difficulty: "Trung b√¨nh",
      type: "daily",
      category: "Th·ª±c ƒë∆°n ng√†y",
      tags: ["Gia ƒë√¨nh", "C√¢n b·∫±ng", "Ti·∫øt ki·ªám"],
      description: "3 b·ªØa ƒÉn ƒë·∫ßy ƒë·ªß dinh d∆∞·ª°ng cho c·∫£ gia ƒë√¨nh trong m·ªôt ng√†y",
      meals: 3,
      rating: 4.6
    },
    {
      id: 5,
      title: "Ng√†y ƒÉn chay thanh ƒë·∫°m",
      image: "https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=400&h=300&fit=crop",
      duration: "1 ng√†y",
      servings: "2-3 ng∆∞·ªùi",
      budget: "120K/ng√†y",
      difficulty: "D·ªÖ",
      type: "daily",
      category: "Th·ª±c ƒë∆°n ng√†y",
      tags: ["Chay", "Thanh ƒë·∫°m", "Healthy"],
      description: "Th·ª±c ƒë∆°n chay ƒë·∫ßy ƒë·ªß dinh d∆∞·ª°ng cho 1 ng√†y",
      meals: 3,
      rating: 4.4
    },
    // Th·ª±c ƒë∆°n tu·∫ßn
    {
      id: 6,
      title: "Th·ª±c ƒë∆°n 7 ng√†y cho b√† b·∫ßu",
      image: "https://images.unsplash.com/photo-1490645935967-10de6ba17061?w=400&h=300&fit=crop",
      duration: "7 ng√†y",
      servings: "1-2 ng∆∞·ªùi",
      budget: "800K/tu·∫ßn",
      difficulty: "Trung b√¨nh",
      type: "weekly",
      category: "Th·ª±c ƒë∆°n tu·∫ßn",
      tags: ["B√† b·∫ßu", "Dinh d∆∞·ª°ng", "S·ª©c kh·ªèe"],
      description: "Th·ª±c ƒë∆°n ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho m·∫π b·∫ßu, b·ªï sung ƒë·∫ßy ƒë·ªß c√°c ch·∫•t dinh d∆∞·ª°ng c·∫ßn thi·∫øt",
      meals: 21,
      rating: 4.8
    },
    {
      id: 7,
      title: "Th·ª±c ƒë∆°n gi·∫£m c√¢n hi·ªáu qu·∫£ 7 ng√†y",
      image: "https://images.unsplash.com/photo-1498837167922-ddd27525d352?w=400&h=300&fit=crop",
      duration: "7 ng√†y",
      servings: "1 ng∆∞·ªùi",
      budget: "500K/tu·∫ßn",
      difficulty: "Trung b√¨nh",
      type: "weekly",
      category: "Th·ª±c ƒë∆°n tu·∫ßn",
      tags: ["Gi·∫£m c√¢n", "Low-carb", "Healthy"],
      description: "Th·ª±c ƒë∆°n gi·∫£m c√¢n khoa h·ªçc v√† hi·ªáu qu·∫£ trong 7 ng√†y",
      meals: 21,
      rating: 4.7
    },
    {
      id: 8,
      title: "Tu·∫ßn l·ªÖ ti·ªác t√πng v√† ƒÉn m·ª´ng",
      image: "https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=400&h=300&fit=crop",
      duration: "7 ng√†y",
      servings: "8-10 ng∆∞·ªùi",
      budget: "2M/tu·∫ßn",
      difficulty: "Kh√≥",
      type: "weekly",
      category: "Th·ª±c ƒë∆°n tu·∫ßn",
      tags: ["Ti·ªác", "ƒê·∫∑c bi·ªát", "Cao c·∫•p"],
      description: "Th·ª±c ƒë∆°n ƒë·∫∑c bi·ªát cho nh·ªØng tu·∫ßn l·ªÖ c√≥ nhi·ªÅu s·ª± ki·ªán",
      meals: 21,
      rating: 4.9
    },
    // Th·ª±c ƒë∆°n th√°ng
    {
      id: 9,
      title: "Th·ª±c ƒë∆°n Keto 30 ng√†y",
      image: "https://images.unsplash.com/photo-1498837167922-ddd27525d352?w=400&h=300&fit=crop",
      duration: "30 ng√†y",
      servings: "1 ng∆∞·ªùi",
      budget: "3M/th√°ng",
      difficulty: "Kh√≥",
      type: "monthly",
      category: "Th·ª±c ƒë∆°n th√°ng",
      tags: ["Keto", "Gi·∫£m c√¢n", "Low-carb"],
      description: "Th·ª±c ƒë∆°n Keto ho√†n ch·ªânh 30 ng√†y gi√∫p gi·∫£m c√¢n hi·ªáu qu·∫£ v√† c·∫£i thi·ªán s·ª©c kh·ªèe",
      meals: 90,
      rating: 4.6
    },
    {
      id: 10,
      title: "Th·ª±c ƒë∆°n ƒÉn d·∫∑m cho b√© 1 th√°ng",
      image: "https://images.unsplash.com/photo-1609501676725-7186f1aa9583?w=400&h=300&fit=crop",
      duration: "30 ng√†y",
      servings: "1 b√©",
      budget: "1.2M/th√°ng",
      difficulty: "Trung b√¨nh",
      type: "monthly",
      category: "Th·ª±c ƒë∆°n th√°ng",
      tags: ["ƒÇn d·∫∑m", "Tr·∫ª em", "Dinh d∆∞·ª°ng"],
      description: "Th·ª±c ƒë∆°n ƒÉn d·∫∑m an to√†n v√† dinh d∆∞·ª°ng cho b√© t·ª´ 6-12 th√°ng tu·ªïi",
      meals: 90,
      rating: 4.9
    }
  ];

  const categories = [
    {
      key: 'all',
      label: 'T·∫•t c·∫£ th·ª±c ƒë∆°n',
      color: 'bg-gradient-to-r from-gray-500 to-gray-600',
      hoverColor: 'hover:from-gray-600 hover:to-gray-700',
      icon: 'üçΩÔ∏è',
      description: 'Xem t·∫•t c·∫£'
    },
    {
      key: 'single',
      label: 'Th·ª±c ƒë∆°n b·ªØa l·∫ª',
      color: 'bg-gradient-to-r from-blue-500 to-blue-600',
      hoverColor: 'hover:from-blue-600 hover:to-blue-700',
      icon: 'ü•ò',
      description: 'T·ª´ng b·ªØa ƒÉn'
    },
    {
      key: 'daily',
      label: 'Th·ª±c ƒë∆°n c·∫£ ng√†y',
      color: 'bg-gradient-to-r from-green-500 to-green-600',
      hoverColor: 'hover:from-green-600 hover:to-green-700',
      icon: 'üìÖ',
      description: '3 b·ªØa/ng√†y'
    },
    {
      key: 'weekly',
      label: 'Th·ª±c ƒë∆°n tu·∫ßn',
      color: 'bg-gradient-to-r from-orange-500 to-red-500',
      hoverColor: 'hover:from-orange-600 hover:to-red-600',
      icon: 'üìä',
      description: '7 ng√†y'
    },
    {
      key: 'monthly',
      label: 'Th·ª±c ƒë∆°n th√°ng',
      color: 'bg-gradient-to-r from-purple-500 to-pink-500',
      hoverColor: 'hover:from-purple-600 hover:to-pink-600',
      icon: 'üóìÔ∏è',
      description: '30 ng√†y'
    }
  ];

  const filteredMealPlans = selectedCategory === 'all' 
    ? mealPlans 
    : mealPlans.filter(plan => plan.type === selectedCategory);

  const getCategoryIcon = (type: string) => {
    const category = categories.find(cat => cat.key === type);
    return category ? category.icon : 'üç≥';
  };

  return (
    <div className="min-h-screen bg-white">
      <Header />
      <main>
        {/* Hero Section */}
        <section className="bg-gradient-to-br from-orange-50 to-green-50 py-12 px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
              Th·ª±c ƒë∆°n m·∫´u
            </h1>
            <p className="text-xl text-gray-600 mb-8">
              C√°c th·ª±c ƒë∆°n ƒë∆∞·ª£c ph√¢n lo·∫°i theo t·ª´ng b·ªØa ƒÉn, ng√†y, tu·∫ßn v√† th√°ng ƒë·ªÉ ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n
            </p>
          </div>
        </section>

        {/* Categories Filter */}
        <section className="py-12 px-4 bg-gradient-to-br from-orange-50 via-white to-red-50">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">Ch·ªçn lo·∫°i th·ª±c ƒë∆°n</h2>
              <p className="text-gray-600">T√¨m th·ª±c ƒë∆°n ph√π h·ª£p v·ªõi nhu c·∫ßu v√† th·ªùi gian c·ªßa b·∫°n</p>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 max-w-5xl mx-auto">
              {categories.map((category) => (
                <div
                  key={category.key}
                  onClick={() => setSelectedCategory(category.key)}
                  className={`relative group cursor-pointer rounded-2xl p-6 text-center transition-all duration-300 transform hover:scale-105 hover:shadow-xl ${
                    selectedCategory === category.key
                      ? `${category.color} ${category.hoverColor} text-white shadow-lg scale-105 ring-4 ring-orange-200`
                      : 'bg-white text-gray-700 border-2 border-gray-200 hover:border-orange-300 hover:bg-orange-50 shadow-md'
                  }`}
                >
                  {/* Icon */}
                  <div className={`text-4xl mb-3 transition-transform duration-300 ${
                    selectedCategory === category.key ? 'scale-110' : 'group-hover:scale-110'
                  }`}>
                    {category.icon}
                  </div>

                  {/* Label */}
                  <h3 className={`font-bold text-lg mb-2 transition-colors duration-300 ${
                    selectedCategory === category.key ? 'text-white' : 'text-gray-900 group-hover:text-orange-600'
                  }`}>
                    {category.label}
                  </h3>

                  {/* Description */}
                  <p className={`text-sm transition-colors duration-300 ${
                    selectedCategory === category.key ? 'text-white/90' : 'text-gray-500 group-hover:text-orange-500'
                  }`}>
                    {category.description}
                  </p>

                  {/* Active indicator */}
                  {selectedCategory === category.key && (
                    <div className="absolute -top-2 -right-2 w-6 h-6 bg-white rounded-full flex items-center justify-center shadow-lg">
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Meal Plans Grid */}
        <section className="py-12 px-4 bg-white">
          <div className="max-w-6xl mx-auto">
            {/* Results Header */}
            <div className="text-center mb-12">
              <div className="inline-flex items-center gap-3 bg-gradient-to-r from-orange-100 to-red-100 px-6 py-3 rounded-full mb-4">
                <span className="text-2xl">{getCategoryIcon(selectedCategory)}</span>
                <h2 className="text-xl font-bold text-gray-900">
                  {categories.find(cat => cat.key === selectedCategory)?.label || 'T·∫•t c·∫£ th·ª±c ƒë∆°n'}
                </h2>
              </div>
              <p className="text-gray-600">
                T√¨m th·∫•y <span className="font-semibold text-orange-600">{filteredMealPlans.length}</span> th·ª±c ƒë∆°n ph√π h·ª£p
              </p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {filteredMealPlans.map((plan) => (
                <Card 
                  key={plan.id} 
                  className="overflow-hidden hover:shadow-lg transition-shadow cursor-pointer"
                  onClick={() => navigate(`/meal-plans/${plan.id}`)}
                >
                  <div className="aspect-video overflow-hidden relative">
                    <img 
                      src={plan.image} 
                      alt={plan.title}
                      className="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                    />
                    <div className="absolute top-2 right-2">
                      <Badge className="bg-yellow-500 text-white">
                        ‚≠ê {plan.rating}
                      </Badge>
                    </div>
                    <div className="absolute top-2 left-2">
                      <Badge className={`text-white ${
                        plan.type === 'single' ? 'bg-blue-600' :
                        plan.type === 'daily' ? 'bg-green-600' :
                        plan.type === 'weekly' ? 'bg-orange-600' :
                        'bg-purple-600'
                      }`}>
                        {getCategoryIcon(plan.type)} {plan.category}
                      </Badge>
                    </div>
                    <div className="absolute bottom-2 right-2">
                      <Badge className="bg-black/70 text-white">
                        {plan.meals} m√≥n
                      </Badge>
                    </div>
                  </div>
                  <CardHeader>
                    <CardTitle className="line-clamp-2 hover:text-orange-600 transition-colors">
                      {plan.title}
                    </CardTitle>
                    <p className="text-gray-600 text-sm line-clamp-2">{plan.description}</p>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-2 text-sm text-gray-600 mb-4">
                      <div className="flex items-center space-x-1">
                        <Calendar className="h-4 w-4" />
                        <span>{plan.duration}</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <Users className="h-4 w-4" />
                        <span>{plan.servings}</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <DollarSign className="h-4 w-4" />
                        <span>{plan.budget}</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <Heart className="h-4 w-4" />
                        <span>{plan.difficulty}</span>
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-1 mb-4">
                      {plan.tags.slice(0, 2).map((tag) => (
                        <Badge key={tag} variant="secondary" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                    <Button 
                      className="w-full bg-green-600 hover:bg-green-700"
                      onClick={(e) => {
                        e.stopPropagation();
                        navigate(`/meal-plans/${plan.id}`);
                      }}
                    >
                      S·ª≠ d·ª•ng th·ª±c ƒë∆°n
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </section>
      </main>
      <Footer />
    </div>
  );
};

export default MealPlansPage;
