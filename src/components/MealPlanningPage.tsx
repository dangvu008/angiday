import React, { useState, useEffect } from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import MealPlanDetailModal from '@/components/MealPlanDetailModal';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Calendar,
  Users,
  Clock,
  ChefHat,
  Heart,
  Eye,
  Utensils,
  Coffee,
  Sun,
  Moon,
  Apple,
  ArrowUp
} from 'lucide-react';

const MealPlanningPage = () => {
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedMealTime, setSelectedMealTime] = useState('all');
  const [selectedMealPlan, setSelectedMealPlan] = useState<any>(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);

  // Simple cleanup on mount
  useEffect(() => {
    // Force close any modals on mount
    setIsDetailModalOpen(false);
    setSelectedMealPlan(null);
  }, []);

  // Handle scroll to top button
  React.useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 400);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Count meal plans for each meal type
  const getMealTypeCount = (mealType: string) => {
    if (mealType === 'all') return mealPlans.length;
    return mealPlans.filter(plan => {
      if (mealType === 'breakfast') return plan.breakfast.length > 0;
      if (mealType === 'lunch') return plan.lunch.length > 0;
      if (mealType === 'dinner') return plan.dinner.length > 0;
      return false;
    }).length;
  };

  // Get total dishes for each meal type
  const getMealTypeDishCount = (mealType: string) => {
    if (mealType === 'all') {
      return mealPlans.reduce((total, plan) =>
        total + plan.breakfast.length + plan.lunch.length + plan.dinner.length, 0
      );
    }
    return mealPlans.reduce((total, plan) => {
      if (mealType === 'breakfast') return total + plan.breakfast.length;
      if (mealType === 'lunch') return total + plan.lunch.length;
      if (mealType === 'dinner') return total + plan.dinner.length;
      return total;
    }, 0);
  };

  // Enhanced nutrition categories with proper icons and design
  const nutritionNeeds = [
    {
      id: 1,
      name: 'Gi·∫£m kh·ªëi m·ª° th·ª´a',
      color: 'bg-gradient-to-r from-pink-500 to-rose-500',
      hoverColor: 'hover:from-pink-600 hover:to-rose-600',
      icon: 'üèÉ‚Äç‚ôÄÔ∏è',
      description: 'Th·ª±c ƒë∆°n gi·∫£m c√¢n'
    },
    {
      id: 2,
      name: 'C√¢n b·∫±ng dinh d∆∞·ª°ng',
      color: 'bg-gradient-to-r from-green-500 to-emerald-500',
      hoverColor: 'hover:from-green-600 hover:to-emerald-600',
      icon: '‚öñÔ∏è',
      description: 'Dinh d∆∞·ª°ng to√†n di·ªán'
    },
    {
      id: 3,
      name: 'B·ªï m√°u',
      color: 'bg-gradient-to-r from-red-500 to-pink-500',
      hoverColor: 'hover:from-red-600 hover:to-pink-600',
      icon: '‚ù§Ô∏è',
      description: 'TƒÉng c∆∞·ªùng s·ª©c kh·ªèe'
    },
    {
      id: 4,
      name: 'TƒÉng c∆∞·ªùng tr√≠ n√£o',
      color: 'bg-gradient-to-r from-purple-500 to-indigo-500',
      hoverColor: 'hover:from-purple-600 hover:to-indigo-600',
      icon: 'üß†',
      description: 'H·ªó tr·ª£ tr√≠ n√£o'
    },
    {
      id: 5,
      name: 'H·ªó tr·ª£ ti√™u h√≥a',
      color: 'bg-gradient-to-r from-blue-500 to-cyan-500',
      hoverColor: 'hover:from-blue-600 hover:to-cyan-600',
      icon: 'üíö',
      description: 'T·ªët cho d·∫° d√†y'
    },
    {
      id: 6,
      name: 'X√¢y d·ª±ng c∆° b·∫Øp',
      color: 'bg-gradient-to-r from-orange-500 to-amber-500',
      hoverColor: 'hover:from-orange-600 hover:to-amber-600',
      icon: 'üí™',
      description: 'TƒÉng c∆∞·ªùng c∆° b·∫Øp'
    }
  ];

  const mealPlans = [
    {
      id: 1,
      day: 'Th·ª±c ƒë∆°n 1',
      breakfast: [
        {
          name: 'B√∫n ·ªëc',
          image: 'https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=300&h=200&fit=crop',
          time: '45 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'B√∫n ·ªëc ƒë·∫≠m ƒë√† v·ªõi n∆∞·ªõc d√πng th∆°m ngon'
        }
      ],
      lunch: [
        {
          name: 'Canh chua t√¥m rau mu·ªëng',
          image: 'https://images.unsplash.com/photo-1569059078571-45b5e4b8e5b8?w=300&h=200&fit=crop',
          time: '25 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Canh chua thanh m√°t v·ªõi t√¥m t∆∞∆°i'
        },
        {
          name: 'C∆°m tr·∫Øng',
          image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'C∆°m tr·∫Øng d·∫ªo th∆°m'
        }
      ],
      dinner: [
        {
          name: 'Salad b√≠t t·∫øt',
          image: 'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?w=300&h=200&fit=crop',
          time: '30 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'Salad t∆∞∆°i m√°t v·ªõi b√≠t t·∫øt b√≤ th∆°m ngon'
        },
        {
          name: 'B√°nh m√¨ n∆∞·ªõng',
          image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=300&h=200&fit=crop',
          time: '10 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'B√°nh m√¨ n∆∞·ªõng gi√≤n tan'
        }
      ]
    },
    {
      id: 2,
      day: 'Th·ª±c ƒë∆°n 2',
      breakfast: [
        {
          name: 'H·ªß ti·∫øu chay',
          image: 'https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=300&h=200&fit=crop',
          time: '30 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'H·ªß ti·∫øu chay thanh ƒë·∫°m v·ªõi rau c·ªß t∆∞∆°i ngon'
        }
      ],
      lunch: [
        {
          name: 'ƒê·∫≠u h≈© h·∫•p tr·ª©ng',
          image: 'https://images.unsplash.com/photo-1569059078571-45b5e4b8e5b8?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'ƒê·∫≠u h≈© m·ªÅm m·ªãn h·∫•p v·ªõi tr·ª©ng th∆°m ngon'
        },
        {
          name: 'Rau mu·ªëng x√†o t·ªèi',
          image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=300&h=200&fit=crop',
          time: '10 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Rau mu·ªëng xanh gi√≤n x√†o t·ªèi th∆°m'
        },
        {
          name: 'C∆°m tr·∫Øng',
          image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'C∆°m tr·∫Øng d·∫ªo th∆°m'
        }
      ],
      dinner: [
        {
          name: '·ª®c g√† h·∫•p c·∫£i th·∫£o',
          image: 'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?w=300&h=200&fit=crop',
          time: '35 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: '·ª®c g√† m·ªÅm ng·ªçt h·∫•p v·ªõi c·∫£i th·∫£o t∆∞∆°i'
        },
        {
          name: 'Canh rau ng√≥t n·∫•u t√¥m',
          image: 'https://images.unsplash.com/photo-1547592166-23ac45744acd?w=300&h=200&fit=crop',
          time: '15 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Canh rau ng√≥t thanh m√°t v·ªõi t√¥m t∆∞∆°i'
        }
      ]
    },
    {
      id: 3,
      day: 'Th·ª±c ƒë∆°n 3',
      breakfast: [
        {
          name: 'H·ªß ti·∫øu m·ª±c',
          image: 'https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=300&h=200&fit=crop',
          time: '40 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'H·ªß ti·∫øu m·ª±c t∆∞∆°i ngon v·ªõi n∆∞·ªõc d√πng ƒë·∫≠m ƒë√†'
        }
      ],
      lunch: [
        {
          name: 'C√° ch√©p kho ri·ªÅng',
          image: 'https://images.unsplash.com/photo-1569059078571-45b5e4b8e5b8?w=300&h=200&fit=crop',
          time: '50 ph√∫t',
          difficulty: 'Kh√≥',
          description: 'C√° ch√©p kho ri·ªÅng ƒë·∫≠m ƒë√†, th∆°m ngon'
        },
        {
          name: 'Canh kh·ªï qua nh·ªìi th·ªãt',
          image: 'https://images.unsplash.com/photo-1547592166-23ac45744acd?w=300&h=200&fit=crop',
          time: '30 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'Canh kh·ªï qua nh·ªìi th·ªãt thanh m√°t'
        },
        {
          name: 'C∆°m tr·∫Øng',
          image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'C∆°m tr·∫Øng d·∫ªo th∆°m'
        }
      ],
      dinner: [
        {
          name: 'B√∫n g·∫°o x√†o th·ªãt b√≤',
          image: 'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?w=300&h=200&fit=crop',
          time: '25 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'B√∫n g·∫°o x√†o th·ªãt b√≤ th∆°m ngon'
        },
        {
          name: 'Ch√® ƒë·∫≠u xanh',
          image: 'https://images.unsplash.com/photo-1551024506-0bccd828d307?w=300&h=200&fit=crop',
          time: '30 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Ch√® ƒë·∫≠u xanh m√°t l·∫°nh'
        }
      ]
    },
    {
      id: 4,
      day: 'Th·ª±c ƒë∆°n 4',
      breakfast: [
        {
          name: 'Salad nui',
          image: 'https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Salad nui t∆∞∆°i m√°t v·ªõi rau c·ªß ƒë·∫ßy m√†u s·∫Øc'
        },
        {
          name: 'B√°nh m√¨ n∆∞·ªõng b∆°',
          image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=300&h=200&fit=crop',
          time: '5 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'B√°nh m√¨ n∆∞·ªõng gi√≤n v·ªõi b∆° th∆°m'
        }
      ],
      lunch: [
        {
          name: 'Ngh√™u kho n∆∞·ªõc t∆∞∆°ng',
          image: 'https://images.unsplash.com/photo-1569059078571-45b5e4b8e5b8?w=300&h=200&fit=crop',
          time: '25 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'Ngh√™u kho n∆∞·ªõc t∆∞∆°ng ƒë·∫≠m ƒë√†, th∆°m ngon'
        },
        {
          name: 'Rau c·∫£i lu·ªôc',
          image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=300&h=200&fit=crop',
          time: '10 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Rau c·∫£i xanh lu·ªôc ch·∫•m n∆∞·ªõc m·∫Øm'
        },
        {
          name: 'C∆°m tr·∫Øng',
          image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'C∆°m tr·∫Øng d·∫ªo th∆°m'
        }
      ],
      dinner: [
        {
          name: 'M√¨ tr·ªôn x·ªët mayonnaise',
          image: 'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?w=300&h=200&fit=crop',
          time: '15 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'M√¨ tr·ªôn x·ªët mayonnaise b√©o ng·∫≠y'
        },
        {
          name: 'Tr√† ƒë√° chanh',
          image: 'https://images.unsplash.com/photo-1544787219-7f47ccb76574?w=300&h=200&fit=crop',
          time: '5 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Tr√† ƒë√° chanh m√°t l·∫°nh'
        }
      ]
    },
    {
      id: 5,
      day: 'Th·ª±c ƒë∆°n 5',
      breakfast: [
        {
          name: 'Ph·ªü b√≤',
          image: 'https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=300&h=200&fit=crop',
          time: '90 ph√∫t',
          difficulty: 'Kh√≥',
          description: 'Ph·ªü b√≤ truy·ªÅn th·ªëng v·ªõi n∆∞·ªõc d√πng trong v·∫Øt'
        }
      ],
      lunch: [
        {
          name: 'C√°nh g√† chi√™n l√° qu·∫ø',
          image: 'https://images.unsplash.com/photo-1569059078571-45b5e4b8e5b8?w=300&h=200&fit=crop',
          time: '30 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'C√°nh g√† chi√™n gi√≤n v·ªõi l√° qu·∫ø th∆°m'
        },
        {
          name: 'Canh chua c√° b√¥ng lau',
          image: 'https://images.unsplash.com/photo-1547592166-23ac45744acd?w=300&h=200&fit=crop',
          time: '25 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'Canh chua thanh m√°t v·ªõi c√° b√¥ng lau'
        },
        {
          name: 'C∆°m tr·∫Øng',
          image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'C∆°m tr·∫Øng d·∫ªo th∆°m'
        }
      ],
      dinner: [
        {
          name: 'B√°nh tr√°ng n∆∞·ªõng',
          image: 'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?w=300&h=200&fit=crop',
          time: '15 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'B√°nh tr√°ng n∆∞·ªõng gi√≤n v·ªõi tr·ª©ng'
        },
        {
          name: 'Tr√† ƒë√†o cam s·∫£',
          image: 'https://images.unsplash.com/photo-1544787219-7f47ccb76574?w=300&h=200&fit=crop',
          time: '10 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Tr√† ƒë√†o cam s·∫£ th∆°m m√°t'
        }
      ]
    },
    {
      id: 6,
      day: 'Th·ª±c ƒë∆°n 6',
      breakfast: [
        {
          name: 'B√∫n thang',
          image: 'https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=300&h=200&fit=crop',
          time: '60 ph√∫t',
          difficulty: 'Kh√≥',
          description: 'B√∫n thang H√† N·ªôi truy·ªÅn th·ªëng v·ªõi nhi·ªÅu lo·∫°i th·ªãt'
        }
      ],
      lunch: [
        {
          name: 'Th·ªãt kho t√†u',
          image: 'https://images.unsplash.com/photo-1569059078571-45b5e4b8e5b8?w=300&h=200&fit=crop',
          time: '45 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'Th·ªãt kho t√†u ƒë·∫≠m ƒë√† v·ªõi tr·ª©ng c√∫t'
        },
        {
          name: 'Canh t√¥m b·ªì ng√≥t',
          image: 'https://images.unsplash.com/photo-1547592166-23ac45744acd?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Canh t√¥m b·ªì ng√≥t thanh m√°t'
        },
        {
          name: 'C∆°m tr·∫Øng',
          image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'C∆°m tr·∫Øng d·∫ªo th∆°m'
        }
      ],
      dinner: [
        {
          name: 'Nui x√†o h·∫£i s·∫£n',
          image: 'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?w=300&h=200&fit=crop',
          time: '30 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'Nui x√†o h·∫£i s·∫£n th∆°m ngon'
        },
        {
          name: 'Sinh t·ªë b∆°',
          image: 'https://images.unsplash.com/photo-1544787219-7f47ccb76574?w=300&h=200&fit=crop',
          time: '5 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Sinh t·ªë b∆° b√©o ng·∫≠y m√°t l·∫°nh'
        }
      ]
    },
    {
      id: 7,
      day: 'Th·ª±c ƒë∆°n 7',
      breakfast: [
        {
          name: 'B√∫n ri√™u cua',
          image: 'https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=300&h=200&fit=crop',
          time: '50 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'B√∫n ri√™u cua ƒë·ªìng th∆°m ngon ƒë·∫≠m ƒë√†'
        }
      ],
      lunch: [
        {
          name: 'T√¥m s√∫ kho l√° qu·∫ø',
          image: 'https://images.unsplash.com/photo-1569059078571-45b5e4b8e5b8?w=300&h=200&fit=crop',
          time: '35 ph√∫t',
          difficulty: 'Trung b√¨nh',
          description: 'T√¥m s√∫ kho l√° qu·∫ø th∆°m n·ª©c m≈©i'
        },
        {
          name: 'Rau mu·ªëng lu·ªôc',
          image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=300&h=200&fit=crop',
          time: '10 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Rau mu·ªëng lu·ªôc ch·∫•m t∆∞∆°ng'
        },
        {
          name: 'C∆°m tr·∫Øng',
          image: 'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'C∆°m tr·∫Øng d·∫ªo th∆°m'
        }
      ],
      dinner: [
        {
          name: 'L·∫©u ch√°o chim c√∫t h·∫°t sen',
          image: 'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?w=300&h=200&fit=crop',
          time: '60 ph√∫t',
          difficulty: 'Kh√≥',
          description: 'L·∫©u ch√°o chim c√∫t h·∫°t sen b·ªï d∆∞·ª°ng'
        },
        {
          name: 'Ch√® th√°i',
          image: 'https://images.unsplash.com/photo-1551024506-0bccd828d307?w=300&h=200&fit=crop',
          time: '20 ph√∫t',
          difficulty: 'D·ªÖ',
          description: 'Ch√® th√°i m√°t l·∫°nh nhi·ªÅu m√†u s·∫Øc'
        }
      ]
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'D·ªÖ': return 'bg-green-100 text-green-800';
      case 'Trung b√¨nh': return 'bg-yellow-100 text-yellow-800';
      case 'Kh√≥': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const MealSection = ({ meals, mealType }: { meals: any[], mealType: string }) => {
    const getMealIcon = () => {
      switch (mealType) {
        case 'breakfast': return <Coffee className="h-4 w-4" />;
        case 'lunch': return <Sun className="h-4 w-4" />;
        case 'dinner': return <Moon className="h-4 w-4" />;
        default: return <Utensils className="h-4 w-4" />;
      }
    };

    const getMealLabel = () => {
      switch (mealType) {
        case 'breakfast': return 'S√°ng';
        case 'lunch': return 'Tr∆∞a';
        case 'dinner': return 'T·ªëi';
        default: return 'M√≥n ƒÉn';
      }
    };

    const getMealColor = () => {
      switch (mealType) {
        case 'breakfast': return 'from-amber-400 to-orange-500';
        case 'lunch': return 'from-orange-400 to-red-500';
        case 'dinner': return 'from-purple-400 to-indigo-500';
        default: return 'from-gray-400 to-gray-500';
      }
    };

    const totalTime = meals.reduce((sum, meal) => sum + parseInt(meal.time), 0);

    return (
      <div className="space-y-3">
        {/* Meal Type Header */}
        <div className="flex items-center justify-between">
          <div className={`inline-flex items-center gap-2 px-3 py-1.5 rounded-full bg-gradient-to-r ${getMealColor()} text-white text-sm font-medium shadow-sm`}>
            {getMealIcon()}
            <span>{getMealLabel()}</span>
          </div>
          <div className="text-xs text-gray-500 font-medium">
            {meals.length} m√≥n ‚Ä¢ {totalTime}p
          </div>
        </div>

        {/* Meals List */}
        <div className="space-y-2">
          {meals.map((meal, index) => (
            <div key={index} className="group flex items-start gap-3 p-3 rounded-xl hover:bg-gradient-to-r hover:from-orange-50 hover:to-red-50 transition-all duration-200 border border-transparent hover:border-orange-100">
              <div className="w-14 h-14 rounded-xl overflow-hidden flex-shrink-0 shadow-sm group-hover:shadow-md transition-shadow duration-200">
                <img
                  src={meal.image}
                  alt={meal.name}
                  className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                />
              </div>
              <div className="flex-1 min-w-0">
                <h5 className="font-semibold text-sm text-gray-800 line-clamp-1 mb-1 group-hover:text-orange-700 transition-colors">
                  {meal.name}
                </h5>
                <p className="text-xs text-gray-600 line-clamp-2 mb-2 leading-relaxed">
                  {meal.description}
                </p>
                <div className="flex items-center gap-3 text-xs">
                  <div className="flex items-center gap-1 text-gray-500">
                    <Clock className="h-3 w-3" />
                    <span className="font-medium">{meal.time}</span>
                  </div>
                  <Badge className={`text-xs px-2 py-0.5 ${getDifficultyColor(meal.difficulty)} border-0 font-medium`}>
                    {meal.difficulty}
                  </Badge>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-red-50">
      <Header />

      <main className="container mx-auto px-4 pt-8 pb-12" style={{ minHeight: '100vh' }}>
        {/* Header Section */}
        <div className="text-center mb-12 relative z-20">
          <div className="inline-flex items-center gap-3 bg-gradient-to-r from-orange-500 to-red-500 text-white px-8 py-3 rounded-full mb-6">
            <Calendar className="h-6 w-6" />
            <span className="font-semibold text-lg">K·∫ø Ho·∫°ch N·∫•u ƒÇn</span>
          </div>
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Th·ª±c ƒê∆°n <span className="text-orange-500">Chuy√™n Gia</span>
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
            ƒê∆∞·ª£c thi·∫øt k·∫ø b·ªüi chuy√™n gia dinh d∆∞·ª°ng, m·ªói th·ª±c ƒë∆°n ƒë·∫£m b·∫£o c√¢n b·∫±ng
            <span className="font-semibold text-orange-600"> protein, carbs v√† vitamin</span> c·∫ßn thi·∫øt cho c·∫£ gia ƒë√¨nh
          </p>
        </div>

        {/* Navigation Tabs */}
        <Tabs defaultValue="expert" className="mb-10 relative z-20">
          <TabsList className="grid w-full grid-cols-2 max-w-sm mx-auto bg-white shadow-lg border-0 p-1 rounded-full">
            <TabsTrigger
              value="expert"
              className="flex items-center gap-2 rounded-full data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-500 data-[state=active]:text-white transition-all duration-300"
            >
              <ChefHat className="h-4 w-4" />
              <span className="font-medium">Chuy√™n gia</span>
            </TabsTrigger>
            <TabsTrigger
              value="custom"
              className="flex items-center gap-2 rounded-full data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-500 data-[state=active]:text-white transition-all duration-300"
            >
              <Users className="h-4 w-4" />
              <span className="font-medium">T·ª± t·∫°o</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="expert">
            {/* Nutrition Needs Filter */}
            <div className="mb-10">
              <div className="text-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 mb-2">Ch·ªçn m·ª•c ti√™u dinh d∆∞·ª°ng</h2>
                <p className="text-gray-600 text-sm">Th·ª±c ƒë∆°n ƒë∆∞·ª£c t·ªëi ∆∞u theo nhu c·∫ßu c·ª• th·ªÉ c·ªßa b·∫°n</p>
              </div>
              <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3 max-w-5xl mx-auto">
                {nutritionNeeds.map((need) => (
                  <div
                    key={need.id}
                    className={`relative group cursor-pointer rounded-2xl p-4 text-center transition-all duration-300 transform hover:scale-105 hover:shadow-xl ${need.color} ${need.hoverColor} text-white shadow-lg`}
                  >
                    {/* Icon */}
                    <div className="text-3xl mb-2 transition-transform duration-300 group-hover:scale-110">
                      {need.icon}
                    </div>

                    {/* Label */}
                    <h4 className="font-bold text-sm mb-1 text-white">
                      {need.name}
                    </h4>

                    {/* Description */}
                    <p className="text-xs text-white/90">
                      {need.description}
                    </p>
                  </div>
                ))}
              </div>
            </div>

            {/* Meal Time Filter */}
            <div className="flex justify-center mb-10">
              <div className="inline-flex bg-white rounded-2xl p-2 shadow-lg border border-gray-100">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSelectedMealTime('all')}
                  className={`flex flex-col items-center gap-1 rounded-xl px-6 py-3 transition-all duration-200 ${
                    selectedMealTime === 'all'
                      ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-md'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center gap-2">
                    <Utensils className="h-4 w-4" />
                    <span className="font-medium">T·∫•t c·∫£</span>
                  </div>
                  <span className={`text-xs px-2 py-0.5 rounded-full ${
                    selectedMealTime === 'all'
                      ? 'bg-white/20 text-white'
                      : 'bg-gray-100 text-gray-500'
                  }`}>
                    {getMealTypeCount('all')} th·ª±c ƒë∆°n ‚Ä¢ {getMealTypeDishCount('all')} m√≥n
                  </span>
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSelectedMealTime('breakfast')}
                  className={`flex flex-col items-center gap-1 rounded-xl px-6 py-3 transition-all duration-200 ${
                    selectedMealTime === 'breakfast'
                      ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-md'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center gap-2">
                    <Coffee className="h-4 w-4" />
                    <span className="font-medium">S√°ng</span>
                  </div>
                  <span className={`text-xs px-2 py-0.5 rounded-full ${
                    selectedMealTime === 'breakfast'
                      ? 'bg-white/20 text-white'
                      : 'bg-amber-100 text-amber-600'
                  }`}>
                    {getMealTypeDishCount('breakfast')} m√≥n s√°ng
                  </span>
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSelectedMealTime('lunch')}
                  className={`flex flex-col items-center gap-1 rounded-xl px-6 py-3 transition-all duration-200 ${
                    selectedMealTime === 'lunch'
                      ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-md'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center gap-2">
                    <Sun className="h-4 w-4" />
                    <span className="font-medium">Tr∆∞a</span>
                  </div>
                  <span className={`text-xs px-2 py-0.5 rounded-full ${
                    selectedMealTime === 'lunch'
                      ? 'bg-white/20 text-white'
                      : 'bg-orange-100 text-orange-600'
                  }`}>
                    {getMealTypeDishCount('lunch')} m√≥n tr∆∞a
                  </span>
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSelectedMealTime('dinner')}
                  className={`flex flex-col items-center gap-1 rounded-xl px-6 py-3 transition-all duration-200 ${
                    selectedMealTime === 'dinner'
                      ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-md'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center gap-2">
                    <Moon className="h-4 w-4" />
                    <span className="font-medium">T·ªëi</span>
                  </div>
                  <span className={`text-xs px-2 py-0.5 rounded-full ${
                    selectedMealTime === 'dinner'
                      ? 'bg-white/20 text-white'
                      : 'bg-purple-100 text-purple-600'
                  }`}>
                    {getMealTypeDishCount('dinner')} m√≥n t·ªëi
                  </span>
                </Button>
              </div>
            </div>

            {/* Filter Summary */}
            <div className="text-center mb-8">
              <div className="inline-flex items-center gap-2 bg-white px-6 py-3 rounded-full shadow-sm border border-gray-100">
                <span className="text-sm text-gray-600">Hi·ªÉn th·ªã:</span>
                <span className="font-semibold text-orange-600">
                  {selectedMealTime === 'all' ? 'T·∫•t c·∫£ th·ª±c ƒë∆°n' :
                   selectedMealTime === 'breakfast' ? 'Th·ª±c ƒë∆°n c√≥ b·ªØa s√°ng' :
                   selectedMealTime === 'lunch' ? 'Th·ª±c ƒë∆°n c√≥ b·ªØa tr∆∞a' :
                   'Th·ª±c ƒë∆°n c√≥ b·ªØa t·ªëi'}
                </span>
                <span className="text-sm text-gray-500">
                  ({getMealTypeCount(selectedMealTime)} k·∫øt qu·∫£)
                </span>
              </div>
            </div>

            {/* Meal Plans Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
              {mealPlans.map((plan, index) => {
                // Filter logic based on selected meal time
                const shouldShowPlan = selectedMealTime === 'all' ||
                  (selectedMealTime === 'breakfast' && plan.breakfast.length > 0) ||
                  (selectedMealTime === 'lunch' && plan.lunch.length > 0) ||
                  (selectedMealTime === 'dinner' && plan.dinner.length > 0);

                if (!shouldShowPlan) return null;

                return (
                <Card
                  key={plan.id}
                  className="group overflow-hidden hover:shadow-xl transition-shadow duration-200 border-0 shadow-lg bg-white rounded-2xl h-full"
                >
                  {/* Card Header */}
                  <div className="bg-gradient-to-br from-orange-500 via-red-500 to-pink-500 p-6 text-center rounded-t-2xl">
                    <div className="absolute inset-0 bg-black/10 rounded-t-2xl"></div>
                    <div className="relative flex items-center justify-center gap-2 mb-3">
                      <ChefHat className="h-6 w-6 text-white" />
                      <h3 className="text-white font-bold text-xl">{plan.day}</h3>
                    </div>
                    <div className="relative flex items-center justify-center gap-4 text-white/90 text-sm">
                      <div className="flex items-center gap-1">
                        <Utensils className="h-4 w-4" />
                        <span>{plan.breakfast.length + plan.lunch.length + plan.dinner.length} m√≥n</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="h-4 w-4" />
                        <span>
                          {plan.breakfast.reduce((sum: number, meal: any) => sum + parseInt(meal.time), 0) +
                           plan.lunch.reduce((sum: number, meal: any) => sum + parseInt(meal.time), 0) +
                           plan.dinner.reduce((sum: number, meal: any) => sum + parseInt(meal.time), 0)}p
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Card Content */}
                  <CardContent className="p-6">
                    <div className="space-y-5">
                      {/* Show only selected meal type or all */}
                      {(selectedMealTime === 'all' || selectedMealTime === 'breakfast') && (
                        <MealSection meals={plan.breakfast} mealType="breakfast" />
                      )}
                      {(selectedMealTime === 'all' || selectedMealTime === 'lunch') && (
                        <MealSection meals={plan.lunch} mealType="lunch" />
                      )}
                      {(selectedMealTime === 'all' || selectedMealTime === 'dinner') && (
                        <MealSection meals={plan.dinner} mealType="dinner" />
                      )}
                    </div>

                    {/* Action Button */}
                    <div className="mt-6 pt-4 border-t border-gray-100">
                      <Button
                        className="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white border-0 rounded-xl py-3 font-semibold transition-all duration-300 hover:scale-105 hover:shadow-lg"
                        onClick={() => {
                          setSelectedMealPlan(plan);
                          setIsDetailModalOpen(true);
                        }}
                      >
                        <Eye className="h-4 w-4 mr-2" />
                        Xem chi ti·∫øt th·ª±c ƒë∆°n
                      </Button>
                    </div>
                  </CardContent>
                </Card>
                );
              })}
            </div>

            {/* Show message when no plans match filter */}
            {mealPlans.every(plan => {
              const shouldShowPlan = selectedMealTime === 'all' ||
                (selectedMealTime === 'breakfast' && plan.breakfast.length > 0) ||
                (selectedMealTime === 'lunch' && plan.lunch.length > 0) ||
                (selectedMealTime === 'dinner' && plan.dinner.length > 0);
              return !shouldShowPlan;
            }) && (
              <div className="text-center py-16">
                <div className="w-20 h-20 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4">
                  {selectedMealTime === 'breakfast' && <Coffee className="h-10 w-10 text-gray-400" />}
                  {selectedMealTime === 'lunch' && <Sun className="h-10 w-10 text-gray-400" />}
                  {selectedMealTime === 'dinner' && <Moon className="h-10 w-10 text-gray-400" />}
                </div>
                <h3 className="text-xl font-semibold text-gray-700 mb-2">
                  Kh√¥ng t√¨m th·∫•y th·ª±c ƒë∆°n ph√π h·ª£p
                </h3>
                <p className="text-gray-600">
                  Hi·ªán t·∫°i ch∆∞a c√≥ th·ª±c ƒë∆°n n√†o cho b·ªØa {
                    selectedMealTime === 'breakfast' ? 's√°ng' :
                    selectedMealTime === 'lunch' ? 'tr∆∞a' : 't·ªëi'
                  }. Vui l√≤ng ch·ªçn b·ªô l·ªçc kh√°c.
                </p>
              </div>
            )}

            {/* Suggested Dishes Section - Slide View */}
            <div className="bg-gradient-to-br from-gray-50 to-orange-50 rounded-3xl p-8 mt-16">
              <div className="text-center mb-8">
                <div className="inline-flex items-center gap-3 bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-2 rounded-full mb-4">
                  <Apple className="h-5 w-5" />
                  <span className="font-semibold">M√≥n ƒÉn g·ª£i √Ω</span>
                </div>
                <h3 className="text-2xl font-bold text-gray-800 mb-4">
                  Th√™m m√≥n v√†o th·ª±c ƒë∆°n c·ªßa b·∫°n
                </h3>
                <p className="text-gray-600 max-w-2xl mx-auto mb-6">
                  Kh√°m ph√° c√°c m√≥n ƒÉn ƒëa d·∫°ng ƒë·ªÉ b·ªï sung v√†o th·ª±c ƒë∆°n hi·ªán c√≥,
                  t·∫°o n√™n b·ªØa ƒÉn phong ph√∫ v√† h·∫•p d·∫´n h∆°n
                </p>
              </div>

              {/* Horizontal Scroll Container */}
              <div className="relative">
                <div className="flex gap-6 overflow-x-auto scrollbar-hide pb-4 px-4 -mx-4" style={{ scrollSnapType: 'x mandatory' }}>
                  {[
                    { id: 1, name: '√ìc x√†o kh·∫ø', image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=300&h=200&fit=crop', time: '15 ph√∫t', difficulty: 'D·ªÖ', rating: 4.5, reviews: 350, description: '√ìc heo x√†o kh·∫ø chua ng·ªçt' },
                    { id: 2, name: 'L·∫©u v·ªãt h·∫ßm s·∫£', image: 'https://images.unsplash.com/photo-1569059078571-45b5e4b8e5b8?w=300&h=200&fit=crop', time: '35 ph√∫t', difficulty: 'D·ªÖ', rating: 4.3, reviews: 316, description: 'L·∫©u v·ªãt h·∫ßm s·∫£ th∆°m l·ª´ng' },
                    { id: 3, name: 'S∆∞·ªùn chi√™n x·ªët m·∫≠n', image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=300&h=200&fit=crop', time: '35 ph√∫t', difficulty: 'D·ªÖ', rating: 4.4, reviews: 311, description: 'S∆∞·ªùn chi√™n gi√≤n v·ªõi x·ªët m·∫≠n chua ng·ªçt' },
                    { id: 4, name: 'Canh s∆∞·ªùn h·∫°t sen', image: 'https://images.unsplash.com/photo-1551024506-0bccd828d307?w=300&h=200&fit=crop', time: '25 ph√∫t', difficulty: 'D·ªÖ', rating: 4.2, reviews: 272, description: 'Canh s∆∞·ªùn h·∫°t sen thanh m√°t b·ªï d∆∞·ª°ng' },
                    { id: 5, name: 'B√°nh cu·ªën t√¥m ch·∫•y', image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=300&h=200&fit=crop', time: '45 ph√∫t', difficulty: 'Trung b√¨nh', rating: 4.6, reviews: 428, description: 'B√°nh cu·ªën m·ªèng v·ªõi t√¥m ch·∫•y th∆°m ngon' },
                    { id: 6, name: 'C√† ri g√†', image: 'https://images.unsplash.com/photo-1598103442097-8b74394b95c6?w=300&h=200&fit=crop', time: '50 ph√∫t', difficulty: 'Trung b√¨nh', rating: 4.7, reviews: 523, description: 'C√† ri g√† ƒë·∫≠m ƒë√† v·ªõi b√°nh m√¨ ho·∫∑c c∆°m' },
                    { id: 7, name: 'G·ªèi ƒëu ƒë·ªß', image: 'https://images.unsplash.com/photo-1540420773420-3366772f4999?w=300&h=200&fit=crop', time: '15 ph√∫t', difficulty: 'D·ªÖ', rating: 4.1, reviews: 189, description: 'G·ªèi ƒëu ƒë·ªß chua cay gi√≤n ngon' },
                    { id: 8, name: 'B√°nh flan', image: 'https://images.unsplash.com/photo-1551024506-0bccd828d307?w=300&h=200&fit=crop', time: '40 ph√∫t', difficulty: 'Trung b√¨nh', rating: 4.3, reviews: 267, description: 'B√°nh flan m·ªÅm m·ªãn v·ªõi caramel th∆°m' }
                  ].map((dish) => (
                    <Card key={dish.id} className="group flex-shrink-0 w-72 overflow-hidden hover:shadow-xl transition-all duration-300 border-0 shadow-lg bg-white rounded-2xl hover:scale-105" style={{ scrollSnapAlign: 'start' }}>
                      <div className="relative overflow-hidden">
                        <img
                          src={dish.image}
                          alt={dish.name}
                          className="w-full h-48 object-cover group-hover:scale-110 transition-transform duration-300"
                        />
                        <div className="absolute top-3 left-3">
                          <Badge className={`${getDifficultyColor(dish.difficulty)} text-xs font-medium shadow-sm`}>
                            {dish.difficulty}
                          </Badge>
                        </div>
                        <div className="absolute top-3 right-3">
                          <Button variant="ghost" size="sm" className="h-8 w-8 p-0 bg-white/80 hover:bg-white backdrop-blur-sm">
                            <Heart className="h-4 w-4 text-gray-600 hover:text-red-500" />
                          </Button>
                        </div>
                        <div className="absolute bottom-3 left-3 flex items-center gap-1 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full">
                          <div className="flex items-center gap-1">
                            <span className="text-yellow-500 text-sm">‚òÖ</span>
                            <span className="text-xs font-medium text-gray-700">{dish.rating}</span>
                          </div>
                          <span className="text-xs text-gray-500">({dish.reviews})</span>
                        </div>
                      </div>

                      <CardContent className="p-4">
                        <h4 className="font-bold text-gray-900 mb-2 line-clamp-1">
                          {dish.name}
                        </h4>
                        <p className="text-gray-600 text-sm mb-3 line-clamp-2 leading-relaxed">
                          {dish.description}
                        </p>

                        <div className="flex items-center justify-between mb-4">
                          <div className="flex items-center gap-1 text-gray-500">
                            <Clock className="h-3 w-3" />
                            <span className="text-xs font-medium">{dish.time}</span>
                          </div>
                          <div className="text-xs text-gray-500">
                            4 Ng∆∞·ªùi
                          </div>
                        </div>

                        <Button
                          size="sm"
                          className="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white text-sm py-2.5 rounded-xl font-medium shadow-sm hover:shadow-md transition-all duration-200"
                        >
                          Xem chi ti·∫øt
                        </Button>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>

              <div className="text-center mt-8">
                <Button
                  variant="outline"
                  className="border-2 border-orange-500 text-orange-600 bg-white hover:bg-orange-500 hover:border-orange-500 hover:text-white px-8 py-3 rounded-full font-medium shadow-sm hover:shadow-md transition-all duration-300"
                  onClick={() => window.location.href = '/recipes'}
                >
                  Xem to√†n b·ªô c√¥ng th·ª©c
                  <ArrowUp className="h-4 w-4 ml-2 rotate-45" />
                </Button>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="custom">
            <div className="text-center py-20">
              <div className="max-w-md mx-auto">
                <div className="relative mb-8">
                  <div className="w-24 h-24 mx-auto bg-gradient-to-br from-orange-100 to-red-100 rounded-full flex items-center justify-center mb-6">
                    <Calendar className="h-12 w-12 text-orange-500" />
                  </div>
                  <div className="absolute top-0 right-1/2 transform translate-x-8 -translate-y-2">
                    <div className="w-6 h-6 bg-yellow-400 rounded-full flex items-center justify-center">
                      <span className="text-xs font-bold text-white">!</span>
                    </div>
                  </div>
                </div>

                <h3 className="text-2xl font-bold text-gray-800 mb-4">
                  S·∫Øp ra m·∫Øt!
                </h3>
                <p className="text-gray-600 leading-relaxed mb-6">
                  Ch·ª©c nƒÉng <span className="font-semibold text-orange-600">t·ª± t·∫°o th·ª±c ƒë∆°n</span> ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.
                  B·∫°n s·∫Ω c√≥ th·ªÉ t·∫°o k·∫ø ho·∫°ch n·∫•u ƒÉn c√° nh√¢n h√≥a theo:
                </p>

                <div className="grid grid-cols-1 gap-3 text-left max-w-xs mx-auto mb-8">
                  <div className="flex items-center gap-3 p-3 bg-orange-50 rounded-lg">
                    <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                    <span className="text-sm text-gray-700">S·ªü th√≠ch c√° nh√¢n</span>
                  </div>
                  <div className="flex items-center gap-3 p-3 bg-red-50 rounded-lg">
                    <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                    <span className="text-sm text-gray-700">Nhu c·∫ßu dinh d∆∞·ª°ng</span>
                  </div>
                  <div className="flex items-center gap-3 p-3 bg-purple-50 rounded-lg">
                    <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                    <span className="text-sm text-gray-700">Ng√¢n s√°ch gia ƒë√¨nh</span>
                  </div>
                  <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                    <span className="text-sm text-gray-700">Th·ªùi gian n·∫•u n∆∞·ªõng</span>
                  </div>
                </div>

                <Button className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white px-8 py-3 rounded-full font-semibold shadow-lg hover:shadow-xl transition-all duration-300">
                  <Heart className="h-4 w-4 mr-2" />
                  ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o
                </Button>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </main>

      <Footer />

      {/* Scroll to Top Button */}
      {showScrollTop && (
        <button
          onClick={scrollToTop}
          className="fixed bottom-8 right-8 z-40 w-14 h-14 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group animate-in fade-in slide-in-from-bottom-4"
        >
          <ArrowUp className="h-6 w-6 group-hover:scale-110 transition-transform duration-200" />
        </button>
      )}

      {/* Detail Modal */}
      {selectedMealPlan && isDetailModalOpen && (
        <MealPlanDetailModal
          isOpen={isDetailModalOpen}
          onClose={() => {
            setIsDetailModalOpen(false);
            setSelectedMealPlan(null);
          }}
          mealPlan={selectedMealPlan}
        />
      )}
    </div>
  );
};

export default MealPlanningPage;
