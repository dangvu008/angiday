
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { ImportService } from '@/services/ImportService';
import ErrorDisplay from './ErrorDisplay';

interface ImportModalProps {
  isOpen: boolean;
  onClose: () => void;
  onImport: (data: any) => void;
  type: 'news' | 'recipe';
}

const ImportModal = ({ isOpen, onClose, onImport, type }: ImportModalProps) => {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [extractedData, setExtractedData] = useState<any>(null);
  const [isImporting] = useState(false);
  const [importError, setImportError] = useState<any>(null);
  const { toast } = useToast();

  const getLanguageName = (langCode: string): string => {
    const languages: { [key: string]: string } = {
      'en': 'Ti·∫øng Anh',
      'zh': 'Ti·∫øng Trung',
      'ja': 'Ti·∫øng Nh·∫≠t',
      'ko': 'Ti·∫øng H√†n',
      'th': 'Ti·∫øng Th√°i',
      'fr': 'Ti·∫øng Ph√°p',
      'de': 'Ti·∫øng ƒê·ª©c',
      'es': 'Ti·∫øng T√¢y Ban Nha',
      'it': 'Ti·∫øng √ù',
      'vi': 'Ti·∫øng Vi·ªát'
    };
    return languages[langCode] || langCode.toUpperCase();
  };

  const handleExtract = async () => {
    if (!url.trim()) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng nh·∫≠p URL h·ª£p l·ªá",
        variant: "destructive",
      });
      return;
    }

    // Validate URL format
    try {
      new URL(url);
    } catch {
      toast({
        title: "L·ªói",
        description: "URL kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setExtractedData(null);
    setImportError(null);
    setProgress(0);
    
    try {
      // Simulate realistic progress
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev < 30) return prev + 5;
          if (prev < 60) return prev + 3;
          if (prev < 90) return prev + 2;
          return prev;
        });
      }, 300);

      const data = await ImportService.extractFromUrl(url, type);
      
      clearInterval(progressInterval);
      setProgress(100);
      
      if (data.success && data.data) {
        setExtractedData({
          ...data.data,
          warnings: data.warnings,
          validationScore: data.validationScore,
          contentType: data.contentType
        });

        // Show appropriate toast based on validation
        if (data.warnings && data.warnings.length > 0) {
          const hasError = data.warnings.some(w => w.includes('‚ö†Ô∏è C·∫¢NH B√ÅO'));

          toast({
            title: hasError ? "C·∫£nh b√°o" : "Th√†nh c√¥ng v·ªõi l∆∞u √Ω",
            description: hasError
              ? "ƒê√£ tr√≠ch xu·∫•t d·ªØ li·ªáu nh∆∞ng c√≥ v·∫•n ƒë·ªÅ nghi√™m tr·ªçng. Vui l√≤ng ki·ªÉm tra k·ªπ."
              : "ƒê√£ tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng v·ªõi m·ªôt s·ªë l∆∞u √Ω.",
            variant: hasError ? "destructive" : "default",
          });
        } else {
          toast({
            title: "Th√†nh c√¥ng",
            description: "ƒê√£ tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng",
          });
        }
      } else {
        // Set detailed error information
        setImportError({
          error: data.error || 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu',
          errorCode: data.errorCode,
          errorDetails: data.errorDetails,
          debugInfo: data.debugInfo
        });

        toast({
          title: "Tr√≠ch xu·∫•t th·∫•t b·∫°i",
          description: data.errorDetails?.suggestion || data.error || 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu',
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error extracting data:', error);

      // Set generic error for unexpected errors
      setImportError({
        error: error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh",
        errorCode: 'UNEXPECTED_ERROR',
        errorDetails: {
          step: 'unknown',
          method: 'unknown',
          originalError: error instanceof Error ? error.message : String(error),
          suggestion: 'Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t.'
        }
      });

      toast({
        title: "L·ªói kh√¥ng x√°c ƒë·ªãnh",
        description: error instanceof Error ? error.message : "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong ƒë·ª£i",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const validateImportData = (data: any): boolean => {
    if (!data.title?.trim()) {
      toast({
        title: "L·ªói",
        description: "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
        variant: "destructive",
      });
      return false;
    }

    // Check for critical warnings
    if (data.warnings) {
      const hasCriticalWarning = data.warnings.some((warning: string) =>
        warning.includes('‚ö†Ô∏è C·∫¢NH B√ÅO')
      );

      if (hasCriticalWarning) {
        toast({
          title: "Kh√¥ng th·ªÉ import",
          description: "N·ªôi dung n√†y kh√¥ng ph·∫£i l√† c√¥ng th·ª©c m√≥n ƒÉn. Vui l√≤ng s·ª≠ d·ª•ng URL kh√°c.",
          variant: "destructive",
        });
        return false;
      }
    }

    // Check validation score
    if (data.validationScore !== undefined && data.validationScore < 30) {
      toast({
        title: "Ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu th·∫•p",
        description: "D·ªØ li·ªáu tr√≠ch xu·∫•t c√≥ ch·∫•t l∆∞·ª£ng th·∫•p. B·∫°n c√≥ ch·∫Øc mu·ªën ti·∫øp t·ª•c?",
        variant: "destructive",
      });
      // Still allow import but warn user
    }

    // Check content type
    if (data.contentType && !['recipe', 'unknown'].includes(data.contentType)) {
      toast({
        title: "Lo·∫°i n·ªôi dung kh√¥ng ph√π h·ª£p",
        description: `ƒê√¢y c√≥ v·∫ª l√† ${data.contentType}, kh√¥ng ph·∫£i c√¥ng th·ª©c m√≥n ƒÉn.`,
        variant: "destructive",
      });
      return false;
    }

    if (type === 'recipe') {
      if (!data.ingredients?.trim() && !data.instructions?.trim()) {
        toast({
          title: "Thi·∫øu th√¥ng tin quan tr·ªçng",
          description: "C√¥ng th·ª©c ph·∫£i c√≥ √≠t nh·∫•t nguy√™n li·ªáu ho·∫∑c h∆∞·ªõng d·∫´n",
          variant: "destructive",
        });
        return false;
      }
    }

    if (type === 'news' && !data.content?.trim()) {
      toast({
        title: "Thi·∫øu n·ªôi dung",
        description: "B√†i vi·∫øt ph·∫£i c√≥ n·ªôi dung",
        variant: "destructive",
      });
      return false;
    }

    return true;
  };

  const handleImport = () => {
    if (extractedData && validateImportData(extractedData)) {
      onImport(extractedData);
      onClose();
      resetForm();
    }
  };

  const resetForm = () => {
    setUrl('');
    setProgress(0);
    setExtractedData(null);
  };

  const handleClose = () => {
    onClose();
    resetForm();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[700px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            Import {type === 'news' ? 'B√†i vi·∫øt' : 'C√¥ng th·ª©c'} t·ª´ URL
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="url">URL trang web</Label>
            <Input
              id="url"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              placeholder="https://example.com/article-or-recipe"
              disabled={isLoading}
            />
          </div>

          {isLoading && (
            <div className="space-y-2">
              <Label>ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu...</Label>
              <Progress value={progress} />
            </div>
          )}

          {/* Error Display */}
          {importError && !isLoading && (
            <ErrorDisplay
              error={importError.error}
              errorCode={importError.errorCode}
              errorDetails={importError.errorDetails}
              debugInfo={importError.debugInfo}
              onRetry={() => handleExtract()}
              onReportBug={() => {
                const bugReport = {
                  url,
                  error: importError.error,
                  errorCode: importError.errorCode,
                  debugInfo: importError.debugInfo,
                  timestamp: new Date().toISOString()
                };
                console.log('Bug report:', bugReport);
                // TODO: Send to bug tracking system
              }}
            />
          )}

          {!extractedData && (
            <Button onClick={handleExtract} disabled={isLoading || !url.trim()}>
              {isLoading ? "ƒêang tr√≠ch xu·∫•t..." : "Tr√≠ch xu·∫•t d·ªØ li·ªáu"}
            </Button>
          )}

          {extractedData && (
            <div className="space-y-4 border-t pt-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold">D·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t</h3>
                <div className="flex items-center gap-2">
                  {extractedData.detectedLanguage && extractedData.detectedLanguage !== 'vi' && (
                    <div className="flex items-center gap-2 text-sm text-blue-600 bg-blue-50 px-2 py-1 rounded">
                      <span>üåê</span>
                      <span>ƒê√£ d·ªãch t·ª´: {getLanguageName(extractedData.detectedLanguage)}</span>
                    </div>
                  )}
                  {extractedData.validationScore !== undefined && (
                    <div className={`flex items-center gap-1 text-sm px-2 py-1 rounded ${
                      extractedData.validationScore >= 70 ? 'bg-green-50 text-green-700' :
                      extractedData.validationScore >= 40 ? 'bg-yellow-50 text-yellow-700' :
                      'bg-red-50 text-red-700'
                    }`}>
                      <span>üìä</span>
                      <span>ƒêi·ªÉm: {extractedData.validationScore}/100</span>
                    </div>
                  )}
                  {extractedData.contentType && extractedData.contentType !== 'recipe' && (
                    <div className="flex items-center gap-1 text-sm bg-orange-50 text-orange-700 px-2 py-1 rounded">
                      <span>‚ö†Ô∏è</span>
                      <span>Lo·∫°i: {extractedData.contentType}</span>
                    </div>
                  )}
                  {extractedData.extractionMethod && (
                    <div className="flex items-center gap-1 text-sm bg-purple-50 text-purple-700 px-2 py-1 rounded">
                      <span>üîß</span>
                      <span>Ph∆∞∆°ng th·ª©c: {extractedData.extractionMethod}</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Data Quality Section */}
              {extractedData.dataQuality && (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                  <h4 className="font-medium text-gray-800 mb-3 flex items-center gap-2">
                    <span>üìä</span>
                    Ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu tr√≠ch xu·∫•t
                  </h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-blue-600">
                        {extractedData.dataQuality.titleConfidence}%
                      </div>
                      <div className="text-xs text-gray-600">Ti√™u ƒë·ªÅ</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">
                        {extractedData.dataQuality.ingredientsConfidence}%
                      </div>
                      <div className="text-xs text-gray-600">Nguy√™n li·ªáu</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-orange-600">
                        {extractedData.dataQuality.instructionsConfidence}%
                      </div>
                      <div className="text-xs text-gray-600">H∆∞·ªõng d·∫´n</div>
                    </div>
                    <div className="text-center">
                      <div className={`text-2xl font-bold ${
                        extractedData.dataQuality.overallConfidence >= 70 ? 'text-green-600' :
                        extractedData.dataQuality.overallConfidence >= 40 ? 'text-yellow-600' :
                        'text-red-600'
                      }`}>
                        {extractedData.dataQuality.overallConfidence}%
                      </div>
                      <div className="text-xs text-gray-600">T·ªïng th·ªÉ</div>
                    </div>
                  </div>

                  {extractedData.fieldMapping && (
                    <div className="mt-3 pt-3 border-t border-gray-200">
                      <div className="text-xs text-gray-600 mb-2">Ngu·ªìn d·ªØ li·ªáu:</div>
                      <div className="flex flex-wrap gap-2">
                        {Object.entries(extractedData.fieldMapping).map(([field, source]) => (
                          <span key={field} className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded">
                            {field}: {source as string}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Warnings Section */}
              {extractedData.warnings && extractedData.warnings.length > 0 && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <h4 className="font-medium text-yellow-800 mb-2 flex items-center gap-2">
                    <span>‚ö†Ô∏è</span>
                    C·∫£nh b√°o v√† l∆∞u √Ω
                  </h4>
                  <ul className="space-y-1">
                    {extractedData.warnings.map((warning: string, index: number) => (
                      <li key={index} className={`text-sm flex items-start gap-2 ${
                        warning.includes('‚ö†Ô∏è C·∫¢NH B√ÅO') ? 'text-red-700 font-medium' : 'text-yellow-700'
                      }`}>
                        <span className="mt-0.5">‚Ä¢</span>
                        <span>{warning.replace('‚ö†Ô∏è C·∫¢NH B√ÅO: ', '')}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Ti√™u ƒë·ªÅ</Label>
                  <Input
                    value={extractedData.title || ''}
                    onChange={(e) => setExtractedData({...extractedData, title: e.target.value})}
                  />
                </div>
                
                {type === 'news' && (
                  <div className="space-y-2">
                    <Label>Danh m·ª•c</Label>
                    <Select 
                      value={extractedData.category || 'S·ª©c kh·ªèe'} 
                      onValueChange={(value) => setExtractedData({...extractedData, category: value})}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="S·ª©c kh·ªèe">S·ª©c kh·ªèe</SelectItem>
                        <SelectItem value="N·∫•u ƒÉn">N·∫•u ƒÉn</SelectItem>
                        <SelectItem value="Xu h∆∞·ªõng">Xu h∆∞·ªõng</SelectItem>
                        <SelectItem value="Dinh d∆∞·ª°ng">Dinh d∆∞·ª°ng</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                )}

                {type === 'recipe' && (
                  <>
                    <div className="space-y-2">
                      <Label>Danh m·ª•c</Label>
                      <Select
                        value={extractedData.category || 'M√≥n ch√≠nh'}
                        onValueChange={(value) => setExtractedData({...extractedData, category: value})}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="M√≥n ch√≠nh">M√≥n ch√≠nh</SelectItem>
                          <SelectItem value="M√≥n ph·ª•">M√≥n ph·ª•</SelectItem>
                          <SelectItem value="Tr√°ng mi·ªáng">Tr√°ng mi·ªáng</SelectItem>
                          <SelectItem value="ƒê·ªì u·ªëng">ƒê·ªì u·ªëng</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label>Th·ªùi gian n·∫•u</Label>
                      <Input
                        value={extractedData.cookingTime || ''}
                        onChange={(e) => setExtractedData({...extractedData, cookingTime: e.target.value})}
                        placeholder="30 ph√∫t"
                      />
                    </div>
                  </>
                )}
              </div>

              {type === 'recipe' && (
                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label>ƒê·ªô kh√≥</Label>
                    <Select
                      value={extractedData.difficulty || 'D·ªÖ'}
                      onValueChange={(value: 'D·ªÖ' | 'Trung b√¨nh' | 'Kh√≥') => setExtractedData({...extractedData, difficulty: value})}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="D·ªÖ">D·ªÖ</SelectItem>
                        <SelectItem value="Trung b√¨nh">Trung b√¨nh</SelectItem>
                        <SelectItem value="Kh√≥">Kh√≥</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>S·ªë kh·∫©u ph·∫ßn</Label>
                    <Input
                      type="number"
                      value={extractedData.servings || 2}
                      onChange={(e) => setExtractedData({...extractedData, servings: parseInt(e.target.value) || 2})}
                      min="1"
                      max="20"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Calories (t√πy ch·ªçn)</Label>
                    <Input
                      type="number"
                      value={extractedData.calories || ''}
                      onChange={(e) => setExtractedData({...extractedData, calories: parseInt(e.target.value) || undefined})}
                      placeholder="0"
                    />
                  </div>
                </div>
              )}

              <div className="space-y-2">
                <Label>M√¥ t·∫£</Label>
                <Textarea
                  value={extractedData.description || ''}
                  onChange={(e) => setExtractedData({...extractedData, description: e.target.value})}
                  rows={3}
                  placeholder="M√¥ t·∫£ ng·∫Øn v·ªÅ m√≥n ƒÉn..."
                />
              </div>

              <div className="space-y-2">
                <Label>H√¨nh ·∫£nh</Label>
                <Input
                  value={extractedData.image || ''}
                  onChange={(e) => setExtractedData({...extractedData, image: e.target.value})}
                  placeholder="URL h√¨nh ·∫£nh"
                />
              </div>

              {type === 'news' && (
                <div className="space-y-2">
                  <Label>N·ªôi dung</Label>
                  <Textarea
                    value={extractedData.content || ''}
                    onChange={(e) => setExtractedData({...extractedData, content: e.target.value})}
                    rows={6}
                  />
                </div>
              )}

              {type === 'recipe' && (
                <>
                  <div className="space-y-2">
                    <Label>Nguy√™n li·ªáu</Label>
                    <Textarea
                      value={extractedData.ingredients || ''}
                      onChange={(e) => setExtractedData({...extractedData, ingredients: e.target.value})}
                      rows={4}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>H∆∞·ªõng d·∫´n</Label>
                    <Textarea
                      value={extractedData.instructions || ''}
                      onChange={(e) => setExtractedData({...extractedData, instructions: e.target.value})}
                      rows={4}
                    />
                  </div>
                </>
              )}
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={handleClose}>
            H·ªßy
          </Button>
          {extractedData && (
            <Button onClick={handleImport} disabled={isImporting}>
              {isImporting ? "ƒêang import..." : "Import d·ªØ li·ªáu"}
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ImportModal;
